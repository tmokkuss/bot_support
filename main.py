from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import InputMediaPhoto
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext, filters
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import IsReplyFilter, IDFilter
import re

from datetime import datetime

bot = Bot(token='', parse_mode='HTML')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
TELEGRAM_SUPPORT_CHAT_ID = -1001697752407
PHOTOS_ID = []
photo_delivered: set[int] = set()
googlesheet_id = '100746933510407896313'



"""Messages"""
message_services = f'–ø–µ—Ä–µ–π–¥–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 77 –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ –æ—Ç Alice K'

message_help_other = f'–ø–µ—Ä–µ–π–¥–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å'

message_channel = f'–ø–µ—Ä–µ–π–¥–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–π–º–∞—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ'

message_inst = f'–ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ –º–æ–π –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –∏ –ª–æ–≤–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ ‚ú®'

# help course messages
message_help_course_cancel = f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ'

message_help_course_thanks = '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å, —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–±–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è!\n' \
                             '–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ - –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∂–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é'

message_stop_chat = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å—ã"

# email messages
message_email_error = f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'

message_get_email = f'–¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ –º–Ω–µ c–≤–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∞ –ø–ª–∞—Ñ—Ç–æ—Ä–º–µ –∫—É—Ä—Å–∞ üì•'

# homework messages
message_instruction_for_ask_with_media = f' –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!' \
                                         '\n\n<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è</b>:\n' \
                                         '1. –û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏ –≤–æ–ø—Ä–æ—Å.\n' \
                                         '2. –ï—Å–ª–∏ —É —Ç–µ–±—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–æ –≤—ã–±–µ—Ä–∏ ¬´–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ¬ª –∏–ª–∏ ¬´–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞¬ª. ' \
                                         '–¢–æ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º, –∞ –Ω–µ —Ñ–∞–π–ª–æ–º.\n' \
                                         '3. –ß—Ç–æ–±—ã –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥, –∑–∞–∂–º–∏ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏ ¬´–û—Ç–≤–µ—Ç–∏—Ç—å¬ª –∏–ª–∏ ¬´Reply¬ª.\n' \
                                         '4. –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—à –¥–∏–∞–ª–æ–≥ –Ω–∞–ø–∏—à–∏ —Å—é–¥–∞ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥¬ª –±–µ–∑ –∫–∞–≤—ã—á–µ–∫\n\n' \
                                         '<b>[–í–ê–ñ–ù–û]</b>\n' \
                                         '1. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—É –∑–∞–¥–∞–Ω–∏—è, <u><b>–¥–æ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</b></u> (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è–ª–∏).\n' \
                                         '2. –ê –µ—Å–ª–∏ –≤—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∫–∏, —Ç–æ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –∫–∞–∫ —É–∂–µ –¥–µ–ª–∞–ª–∏ —Ä–∞–Ω–µ–µ.'

message_homework_get_email = '–µ—Å–ª–∏ —Ç—ã –∂–¥–µ—à—å –±–æ–ª–µ–µ 23-—Ö —á–∞—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–≤–æ–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è, ' \
                             '—Ç–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ –º–Ω–µ c–≤–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∫—É—Ä—Å–∞ üì•\n\n' \
                             '–ê –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ 23 —á–∞—Å–∞, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ–Ω–∞¬ª'

message_homework_cancel = '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!'

message_homework_thanks = f'–°–ø–∞—Å–∏–±–æ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —è –≤ —Å–∞–º–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å.\n\n' \
                          '–¢–∞–∫–∂–µ, —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n' \
                          '/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n' \
                          '/homework - ‚è∞ –£—Ç–æ—á–Ω–∏—Ç—å –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∑\n' \
                          '/help_course - üéì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–¥–∞–Ω–∏—è–º –∫—É—Ä—Å–∞\n' \
                          '/help_other - üí¨ –ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å\n' \
                          '/channel - ‚ú® –ö–∞–Ω–∞–ª –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤\n' \
                          '/inst - üòç Instagram\n' \
                          '/services - üéÅ 77 —Å–µ—Ä–≤–∏—Å–æ–≤ –æ—Ç Alice K'


# Add buttons
async def add_buttons():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    home_work = types.KeyboardButton('‚è∞ –£—Ç–æ—á–Ω–∏—Ç—å –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∑')
    ask_course = types.KeyboardButton('üéì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–¥–∞–Ω–∏—è–º –∫—É—Ä—Å–∞')
    ask_other = types.KeyboardButton('üí¨ –ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å')
    tg = types.KeyboardButton('‚ú® –ö–∞–Ω–∞–ª –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ ')
    inst = types.KeyboardButton('üòç Instagram')
    serv_77 = types.KeyboardButton('üéÅ 77 —Å–µ—Ä–≤–∏—Å–æ–≤ –æ—Ç Alice K')
    markup.add(home_work, ask_course, ask_other, tg, inst, serv_77)
    return markup


# Add cancel button
async def add_cancel_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
    cancel_btn = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
    markup.add(cancel_btn)
    return markup


# Say thanks for media
async def say_thanks(message):
    if message.date in photo_delivered:
        return
    photo_delivered.add(message.date)
    markup = await add_buttons()
    await bot.send_message(message.chat.id, message_help_course_thanks, reply_markup=markup)


# /start
@dp.message_handler(commands=['start'])
async def start(message):
    markup = await add_buttons()
    mess = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üëã \n<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n' \
           '/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n' \
           '/homework - ‚è∞ –£—Ç–æ—á–Ω–∏—Ç—å –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∑\n' \
           '/help_course - üéì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–¥–∞–Ω–∏—è–º –∫—É—Ä—Å–∞\n' \
           '/help_other - üí¨ –ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å\n' \
           '/channel - ‚ú® –ö–∞–Ω–∞–ª –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤\n' \
           '/inst - üòç Instagram\n' \
           '/services - üéÅ 77 —Å–µ—Ä–≤–∏—Å–æ–≤ –æ—Ç Alice K\n' \
           '–¢–∞–∫–∂–µ, —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏'
    await bot.send_message(message.chat.id, mess, reply_markup=markup)
    date = datetime.today().strftime("%d.%m.%Y")
    username = message.from_user.username
    id = message.from_user.id
    """    sh = gc.open_by_key(googlesheet_id)
    sh.sheet1.append_row([date, id, username])"""


# State Machine Classes
class Form(StatesGroup):
    email = State()
    ask = State()
    talk = State()


class HomeAsk(StatesGroup):
    email = State()
    time = State()
    lesson = State()


# /help_other
@dp.message_handler(filters.Text(startswith='üí¨'), state='*')
async def help_other_with_button(message: types.Message):
    markup = types.InlineKeyboardMarkup(resize_keyboard=True)
    write = types.InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å', url='https://t.me/AliceKdesign')
    markup.add(write)
    await bot.send_message(message.chat.id,
                           f'{message.from_user.first_name}, {message_help_other}',
                           reply_markup=markup)


@dp.message_handler(commands=['help_other'], state='*')
async def help_other(message: types.Message):
    markup = types.InlineKeyboardMarkup(resize_keyboard=True)
    write = types.InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å', url='https://t.me/AliceKdesign')
    markup.add(write)
    await bot.send_message(message.chat.id,
                           text=f'{message.from_user.first_name}, {message_help_other}',
                           reply_markup=markup)


# /channel
@dp.message_handler(filters.Text(startswith='‚ú®'), state='*')
async def channel_with_button(message: types.Message):
    markup = types.InlineKeyboardMarkup(resize_keyboard=True)
    channel_btn = types.InlineKeyboardButton(text='–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ', url='https://t.me/webdesign_uiux')
    markup.add(channel_btn)
    await bot.send_message(message.chat.id,
                           f'{message.from_user.first_name}, {message_channel}',
                           reply_markup=markup)


@dp.message_handler(commands=['channel'], state='*')
async def channel(message: types.Message):
    markup = types.InlineKeyboardMarkup(resize_keyboard=True)
    channel_btn = types.InlineKeyboardButton(text='–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ', url='https://t.me/webdesign_uiux')
    markup.add(channel_btn)
    await bot.send_message(message.chat.id,
                           f'{message.from_user.first_name}, {message_channel}',
                           reply_markup=markup)


# /inst
@dp.message_handler(filters.Text(startswith='üòç'), state='*')
async def channel_with_button(message: types.Message):
    markup = types.InlineKeyboardMarkup(resize_keyboard=True)
    inst_btn = types.InlineKeyboardButton(text='–ù–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ', url='https://www.instagram.com/webdesign.uiux/')
    markup.add(inst_btn)
    await bot.send_message(message.chat.id,
                           f'{message.from_user.first_name}, {message_inst}',
                           reply_markup=markup)


@dp.message_handler(commands=['inst'], state='*')
async def channel(message: types.Message):
    markup = types.InlineKeyboardMarkup(resize_keyboard=True)
    inst_btn = types.InlineKeyboardButton(text='–ù–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ', url='https://www.instagram.com/webdesign.uiux/')
    markup.add(inst_btn)
    await bot.send_message(message.chat.id,
                           f'{message.from_user.first_name}, {message_inst}',
                           reply_markup=markup)


# /services
@dp.message_handler(filters.Text(startswith='üéÅ'), state='*')
async def channel_with_button(message: types.Message):
    markup = types.InlineKeyboardMarkup(resize_keyboard=True)
    inst_btn = types.InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å', url='https://t.me/AliceK_webdesign_bot')
    markup.add(inst_btn)
    await bot.send_message(message.chat.id,
                           f'{message.from_user.first_name}, {message_services}',
                           reply_markup=markup)


@dp.message_handler(commands=['services'], state='*')
async def channel(message: types.Message):
    markup = types.InlineKeyboardMarkup(resize_keyboard=True)
    inst_btn = types.InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å', url='https://t.me/AliceK_webdesign_bot')
    markup.add(inst_btn)
    await bot.send_message(message.chat.id,
                           f'{message.from_user.first_name}, {message_services}',
                           reply_markup=markup)


# /homework
@dp.message_handler(filters.Text(startswith='‚è∞'), state=None)
async def homework_with_button(message: types.Message):
    markup = await add_cancel_button()
    await HomeAsk.email.set()
    await bot.send_message(message.chat.id,
                           f'{message.from_user.first_name}, {message_homework_get_email}', reply_markup=markup)


@dp.message_handler(commands=['homework'])
async def homework(message: types.Message):
    markup = await add_cancel_button()
    await HomeAsk.email.set()
    await bot.send_message(message.chat.id,
                           f'{message.from_user.first_name}, {message_homework_get_email}', reply_markup=markup)


@dp.message_handler(state=HomeAsk.email)
async def start_homework(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        markup = await add_buttons()
        await bot.send_message(message.chat.id, message_homework_cancel, reply_markup=markup)
        await state.finish()
    else:
        answer = message.text
        message_correct = f'–ù–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –í—ã –∂–¥–µ—Ç–µ'
        async with state.proxy() as data:
            data["email"] = answer
        pattern = r"([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\.[A-Z|a-z]{2,})+"
        number_re = re.compile(pattern)
        markup = await add_cancel_button()
        if number_re.findall(answer):
            async with state.proxy() as data:
                data["email"] = answer
            await bot.send_message(message.chat.id, message_correct, reply_markup=markup)
            await HomeAsk.time.set()
        else:
            await bot.send_message(message.chat.id, message_email_error, reply_markup=markup)


@dp.message_handler(state=HomeAsk.time)
async def process_time(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        markup = await add_buttons()
        await bot.send_message(message.chat.id, message_homework_cancel, reply_markup=markup)
        await state.finish()
    else:
        answer = message.text
        markup = await add_cancel_button()
        async with state.proxy() as data:
            data["time"] = answer
        mess = f'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–º –í—ã –º–æ–¥—É–ª–µ –∏ –Ω–∞ –∫–∞–∫–æ–º —É—Ä–æ–∫–µ'
        await bot.send_message(message.chat.id, mess, reply_markup=markup)
        await HomeAsk.lesson.set()


@dp.message_handler(state=HomeAsk.lesson)
async def process_time(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        markup = await add_buttons()
        await bot.send_message(message.chat.id, message_homework_cancel, reply_markup=markup)
        await state.finish()
    else:
        answer = message.text
        data = await state.get_data()
        email = data.get('email')
        time = data.get('time')
        markup = await add_buttons()
        await bot.send_message(message.chat.id, message_homework_thanks, reply_markup=markup)
        await bot.send_message(TELEGRAM_SUPPORT_CHAT_ID, f'üî• –£—á–µ–Ω–∏–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏\n'
                                                         f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username}\n'
                                                         f'–ü–æ—á—Ç–∞: {email}\n'
                                                         f'–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {time}\n'
                                                         f'–ú–æ–¥—É–ª—å –∏ —É—Ä–æ–∫: {answer}')
        await state.finish()


# /help_course
@dp.message_handler(filters.Text(startswith='üéì'))
async def help_course_with_button(message: types.Message):
    markup = await add_cancel_button()
    await Form.email.set()
    await bot.send_message(message.chat.id,
                           f'{message.from_user.first_name}, {message_get_email}',
                           reply_markup=markup)


@dp.message_handler(commands=['help_course'], state=None)
async def help_course(message: types.Message):
    markup = await add_cancel_button()
    await Form.email.set()
    await bot.send_message(message.chat.id,
                           f'{message.from_user.first_name}, {message_get_email}',
                           reply_markup=markup)


@dp.message_handler(state=Form.email)
async def get_email(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        markup = await add_buttons()
        await bot.send_message(message.chat.id, message_help_course_cancel, reply_markup=markup)
        await state.finish()
    else:
        markup = await add_cancel_button()
        answer = message.text
        async with state.proxy() as data:
            data["email"] = answer
        pattern = r"([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\.[A-Z|a-z]{2,})+"
        number_re = re.compile(pattern)
        if number_re.findall(answer):
            async with state.proxy() as data:
                data["email"] = answer
            await Form.ask.set()
            await bot.send_message(message.chat.id,
                                   f'{message.from_user.first_name}, {message_instruction_for_ask_with_media}',
                                   reply_markup=markup)
        else:
            await bot.send_message(message.chat.id, message_email_error)


# Asks
@dp.message_handler(state=Form.ask)
async def process_name(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        markup = await add_buttons()
        await bot.send_message(message.chat.id, message_help_course_cancel, reply_markup=markup)
        await state.finish()
    else:
        data = await state.get_data()
        email = data.get("email")
        markup = await add_buttons()
        await bot.send_message(message.chat.id, message_help_course_thanks, reply_markup=markup)
        await bot.send_message(TELEGRAM_SUPPORT_CHAT_ID, f'E-mail: {email}\n'
                                                         f'first name: {message.from_user.first_name}\n'
                                                         f'last name: {message.from_user.last_name}\n'
                                                         f'username: @{message.from_user.username}\n'
                                                         f'USER_CHAT_ID: {message.chat.id}\n'
                                                         f'<b>–í–æ–ø—Ä–æ—Å: {message.text}</b>')
        await Form.talk.set()


@dp.message_handler(state=Form.ask, content_types=['photo'])
async def forward_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    email = data.get("email")
    await say_thanks(message)
    photo = message.photo[-1].file_id
    media = [InputMediaPhoto(photo, caption=f'E-mail: {email}\n'
                                            f'first name: {message.from_user.first_name}\n'
                                            f'last name: {message.from_user.last_name}\n'
                                            f'username: @{message.from_user.username}\n'
                                            f'USER_CHAT_ID: {message.chat.id}\n'
                                            f'<b>–í–æ–ø—Ä–æ—Å: {message.caption}</b>')]
    await bot.send_media_group(TELEGRAM_SUPPORT_CHAT_ID, media=media)
    await Form.talk.set()


@dp.message_handler(state=Form.ask, content_types=['video'])
async def forward_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    email = data.get("email")
    await say_thanks(message)
    video = message.video.file_id
    await bot.send_video(TELEGRAM_SUPPORT_CHAT_ID, video=video, caption=f'E-mail: {email}\n'
                                                                        f'first name: {message.from_user.first_name}\n'
                                                                        f'last name: {message.from_user.last_name}\n'
                                                                        f'username: @{message.from_user.username}\n'
                                                                        f'USER_CHAT_ID: {message.chat.id}\n'
                                                                        f'<b>–í–æ–ø—Ä–æ—Å: {message.caption}</b>')
    await Form.talk.set()


# Answers
@dp.message_handler(IDFilter(chat_id=TELEGRAM_SUPPORT_CHAT_ID),
                    IsReplyFilter(True))
async def answer_the_ask(message: types.Message):
    try:
        answer = message.text
        user_info = message.reply_to_message.text
        USER = user_info.split('\n')
        for line in USER:
            if line.startswith('USER_CHAT_ID: '):
                USER_CHAT_ID = line.lstrip('USER_CHAT_ID: ')
                await bot.send_message(USER_CHAT_ID, answer)

    except AttributeError:
        answer = message.text
        user_info = message.reply_to_message.caption
        USER = user_info.split('\n')
        for line in USER:
            if line.startswith('USER_CHAT_ID: '):
                USER_CHAT_ID = line.lstrip('USER_CHAT_ID: ')
                await bot.send_message(USER_CHAT_ID, answer)


@dp.message_handler(IDFilter(chat_id=TELEGRAM_SUPPORT_CHAT_ID),
                    IsReplyFilter(True),
                    content_types=['photo'])
async def answer_the_photo(message: types.Message):
    try:
        await message.reply_to_message.reply("–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        answer = message.photo[-1].file_id
        answer_text = message.caption
        user_info = message.reply_to_message.caption
        USER = user_info.split('\n')
        for line in USER:
            if line.startswith('USER_CHAT_ID: '):
                USER_CHAT_ID = line.lstrip('USER_CHAT_ID: ')
                await bot.send_photo(USER_CHAT_ID, answer)
                await bot.send_message(USER_CHAT_ID, answer_text)
    except AttributeError:
        await message.reply_to_message.reply("–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        answer = message.photo[-1].file_id
        answer_text = message.caption
        user_info = message.reply_to_message.text
        USER = user_info.split('\n')
        for line in USER:
            if line.startswith('USER_CHAT_ID: '):
                USER_CHAT_ID = line.lstrip('USER_CHAT_ID: ')
                await bot.send_photo(USER_CHAT_ID, answer)
                await bot.send_message(USER_CHAT_ID, answer_text)


@dp.message_handler(IDFilter(chat_id=TELEGRAM_SUPPORT_CHAT_ID),
                    IsReplyFilter(True),
                    content_types=['video'])
async def answer_the_photo(message: types.Message):
    try:
        await message.reply_to_message.reply("–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        answer = message.video.file_id
        answer_text = message.caption
        user_info = message.reply_to_message.caption
        USER = user_info.split('\n')
        for line in USER:
            if line.startswith('USER_CHAT_ID: '):
                USER_CHAT_ID = line.lstrip('USER_CHAT_ID: ')
                await bot.send_video(USER_CHAT_ID, answer)
                await bot.send_message(USER_CHAT_ID, answer_text)
    except AttributeError:
        await message.reply_to_message.reply("–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        answer = message.video.file_id
        answer_text = message.caption
        user_info = message.reply_to_message.text
        USER = user_info.split('\n')
        for line in USER:
            if line.startswith('USER_CHAT_ID: '):
                USER_CHAT_ID = line.lstrip('USER_CHAT_ID: ')
                await bot.send_video(USER_CHAT_ID, answer)
                await bot.send_message(USER_CHAT_ID, answer_text)


# Chat Continue
@dp.message_handler(IsReplyFilter(True), state=Form.talk, content_types=['text'])
async def chat_continue_with_video(message: types.Message, state: FSMContext):
    if message.chat.id != TELEGRAM_SUPPORT_CHAT_ID:
        data = await state.get_data()
        email = data.get("email")
        await bot.send_message(TELEGRAM_SUPPORT_CHAT_ID, text=f'<b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—â–µ–Ω–∏—è</b>\n\n'
                                                              f'E-mail: {email}\n'
                                                              f'username: @{message.from_user.username}\n'
                                                              f'USER_CHAT_ID: {message.chat.id}\n'
                                                              f'<b>–í–æ–ø—Ä–æ—Å: {message.text}</b>')


@dp.message_handler(IsReplyFilter(True), state=Form.talk, content_types=['video'])
async def chat_continue(message: types.Message, state: FSMContext):
    if message.chat.id != TELEGRAM_SUPPORT_CHAT_ID:
        data = await state.get_data()
        email = data.get("email")
        video = message.video.file_id
        await bot.send_video(TELEGRAM_SUPPORT_CHAT_ID, video=video, caption=f'<b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—â–µ–Ω–∏—è</b>'
                                                                            f'E-mail: {email}'
                                                                            f'username: @{message.from_user.username}\n'
                                                                            f'USER_CHAT_ID: {message.chat.id}\n'
                                                                            f'<b>–í–æ–ø—Ä–æ—Å: {message.caption}</b>')


@dp.message_handler(IsReplyFilter(True), state=Form.talk, content_types=['photo'])
async def chat_continue_with_photo(message: types.Message, state: FSMContext):
    if message.chat.id != TELEGRAM_SUPPORT_CHAT_ID:
        data = await state.get_data()
        email = data.get("email")
        photo = message.photo[-1].file_id
        media = [InputMediaPhoto(photo, caption=f'<b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—â–µ–Ω–∏—è</b>\n\n'
                                                f'E-mail: {email}\n'
                                                f'username: @{message.from_user.username}\n'
                                                f'USER_CHAT_ID: {message.chat.id}\n'
                                                f'<b>–í–æ–ø—Ä–æ—Å: {message.caption}</b>')]
        await bot.send_media_group(TELEGRAM_SUPPORT_CHAT_ID, media=media)


@dp.message_handler(filters.Text(equals="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"), state=Form.talk)
async def stop_chat(message: types.Message, state: FSMContext):
    markup = await add_buttons()
    data = await state.get_data()
    email = data.get("email")
    await bot.send_message(message.chat.id, message_stop_chat, reply_markup=markup)
    await bot.send_message(TELEGRAM_SUPPORT_CHAT_ID, f'<b>–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç!</b>\n\n'
                                                     f'E-mail: {email}\n'
                                                     f'username: @{message.from_user.username}\n'
                                                     f'USER_CHAT_ID: {message.chat.id}\n')
    await state.finish()


executor.start_polling(dp, skip_updates=True)
